:Namespace prim

q_print_memstats←'print_memstats_ibeam'⌶

⍝ Basic system functions
q_signal←'q_signal_ibeam'⌶
q_dr←'q_dr_ibeam'⌶

⍝ System constants
spn←'span_array'⌶⌶⌶⌶
ZILDE←⍬
NUM_0←0
NUM_1←1
NUM_11←11
NUM_80←80
NUM_160←160
NUM_163←163
NUM_320←320
NUM_323←323
NUM_326←326
NUM_645←645
NUM_1289←1289
VEC_0←1('reshape_ibeam'⌶)0

⍝ Utilities
eq←'eq_ibeam'⌶⌶⌶
squeeze←'squeeze_ibeam'⌶
is_simple←'is_simple_ibeam'⌶
is_numeric←'is_numeric_ibeam'⌶
is_char←'is_char_ibeam'⌶
is_integer←'is_integer_ibeam'⌶
is_bool←{11≡⎕DR squeeze ⍵}
is_cmpx←{1289≡⎕DR squeeze ⍵}
is_span←'is_span_ibeam'⌶
has_nat_vals←'has_nat_vals_ibeam'⌶
both_simple←{is_simple ⍺:is_simple ⍵ ⋄ 0}
both_numeric←{is_numeric ⍺:is_numeric ⍵ ⋄ 0}
both_integer←{is_integer ⍺:is_integer ⍵ ⋄ 0}
both_char←{is_char ⍺:is_char ⍵ ⋄ 0}
both_bool←{is_bool ⍺:is_bool ⍵ ⋄ 0}
bitand←'bitand_vec_ibeam'⌶
scl_and←{⍺:⍵ ⋄ 0} ⋄ scl_or←{⍺:1 ⋄ ⍵}
any←'any_ibeam'⌶
numeric←{⍺←⊢ ⋄ (⍺⊣0)both_numeric ⍵:⍺ ⍺⍺ ⍵ ⋄ ⎕SIGNAL 11}
chk_scl←'chk_scl_ibeam'⌶
ambiv←{
	mon←VEC_0 same ⎕NC'⍺' ⋄ nax←0 ⋄ axis⍠←nax←1
	mon scl_and nax:⍺⍺ ⍵ ⋄ mon:⍺⍺[axis] ⍵ ⋄ nax:⍺ ⍵⍵ ⍵ ⋄ ⍺ ⍵⍵[axis] ⍵
}
veach←'veach_ibeam'⌶⌶
scalar←{op←⍺⍺
	hax←1 ⋄ axis⍠←hax←0 ⋄ hax:⍺{
		hl←(≢⍴⍺)>≢⍴⍵ ⋄ l←⍺{hl:⍵ ⋄ ⍺}⍵ ⋄ h←⍺{hl:⍺ ⋄ ⍵}⍵ ⋄ s←⍴h
		1<≢⍴axis:⎕SIGNAL 4 ⋄ (≢⍴l)≢≢axis:⎕SIGNAL 4 ⋄ axis←,axis
		(⍴l)≢s[axis]:⎕SIGNAL 5
		m←(≢s)⍴1 ⋄ m[axis]←0 ⋄ mi←⍸m
		t←⍳≢s ⋄ t[mi]←⍳≢mi ⋄ t[axis]←(≢mi)+⍳≢axis
		h←t⍉h ⋄ l←(⍴h)⍴l ⋄ t←⍋t
		hl:t⍉h op scalar l ⋄ t⍉l op scalar h
	}⍵
	s←⍺ chk_scl ⍵
	0≡≢,⍺:s⍴0
	0≡≢,⍵:s⍴0
	⍺ both_simple ⍵:s⍴⍺ ⍺⍺ ⍵
	s⍴squeeze ⍺ ∇ veach ⍵
}
scl_mon←{is_simple ⍵:⍺⍺ ⍵ ⋄ (⍴⍵)⍴squeeze ∇ veach ⍵}
chk_axis←{axis←⍺⍺ ⋄ ~⍺:0
	1<≢⍴axis:⎕SIGNAL 4 ⋄ 1≢≢axis:⎕SIGNAL 5
	~has_nat_vals axis:⎕SIGNAL 11 ⋄ (≢⍴⍵)≤axis:⎕SIGNAL 4
	0
}

⍝ ⍴: Shape / Reshape
shape←'shape_ibeam'⌶
chk_valid_shape←{
	{rnk←≢⍴⍵ ⋄ 0≡rnk:0 ⋄ 1≡rnk:0 ⋄ 1}⍵:⎕SIGNAL 4
	0≡≢,⍵:0
	{has_nat_vals squeeze ⍵:0 ⋄ 1}⍵:⎕SIGNAL 11
	0
}
prototype←{is_numeric squeeze ⍵:(⍴⍵)⍴0 ⋄ is_char ⍵:(⍴⍵)⍴' ' ⋄ ∇¨⍵}
reshape←{chk_valid_shape ⍺: ⋄ ⍺('reshape_ibeam'⌶)⍵}
rho←shape ambiv reshape

⍝ X[]←Y: Bracket Assignment
idxerr←{⎕SIGNAL 3}
idx_rnk_check←{(≢⍴⍺)≢≢,⍵:⎕SIGNAL 4 ⋄ 0}
idx_rng_check←{
	is_span ⍵:0
	0≡≡⍺:⍺{
		0≡≢,⍵:0
		0≡is_integer⊢squeeze ⍵:⎕SIGNAL 11
		any(⍵<0)∨⍺≤⍵:⎕SIGNAL 3
	0}⍵
	0⊣⍺ ∇¨⍵
}
brkidx←{⍺ idx_rnk_check ⍵: ⋄ (⍴⍺)idx_rng_check ⍵: ⋄ ⍵}
set←'set_ibeam'⌶

⍝ X[]f←Y: Modified Bracket Assignment
mst_vals←{idx←⍺⍺ ⋄ op←⍵⍵ ⋄ idx((idx⌷⍺)op¨⍵)
	⍝ (≢idx)≡≢uidx←∪idx:uidx((,⍺)[uidx] op¨,⍵)
	⍝ uidx((⌽uidx,idx){op⍨⌿⍵}⌸⌽(,⍺)[uidx],⍵)
}
mst←'mst_ibeam'⌶⌶

⍝ ⌷: Materialize | Squad indexing
materialize←'materialize_ibeam'⌶
sqd_idx←{
	hax←1 ⋄ axis⍠←hax←0
	hax:⍺{
		1<≢⍴⍺:⎕SIGNAL 4
		1<≢⍴axis:⎕SIGNAL 4
		~is_integer squeeze axis:⎕SIGNAL 11
		any axis<0:⎕SIGNAL 11
		any (≢⍴⍵)≤axis:⎕SIGNAL 4
		(≢axis)≢≢⍺:⎕SIGNAL 5
		0≡≢⍺:⍵
		m←(≢⍴⍵)⍴0 ⋄ _←{m[⍵]:⎕SIGNAL 11 ⋄ m[⍵]←1}¨axis
		(≢⍴⍵)<≢⍺:⎕SIGNAL 5
		i←(≢⍴⍵)⍴'span_array'⌶⌶⌶⌶ ⋄ i[axis]←⍺ ⋄ i⌷⍵
	}⍵
	1<≢⍴⍺:⎕SIGNAL 4 ⋄ (≢⍴⍵)<≢⍺:⎕SIGNAL 5
	0≡≢⍺:⍵
	1≡≢⍺:⍺{
		is_span⊢i←⊃⍺:⍵
		(≢⍵)idx_rng_check i:
		(squeeze ⍺)('index_ibeam'⌶)⍵
	}⍵
	((≢⍺)↑⍴⍵) idx_rng_check ⍺:
	(squeeze ⍺)('index_ibeam'⌶)⍵
}
sqd←materialize ambiv sqd_idx

⍝ X[]: Bracket Indexing
brkmon←{⎕SIGNAL 2}
brk←{⍺ idx_rnk_check ⍵: ⋄ ⍵⌷⍺}

⍝ ⊢: Right
rgt←{⍵}

⍝ ⊣: Left
lftid←{⍵}
left←{⍺}
lft←lftid ambiv left

⍝ ,: Ravel / Catenate
ravel←{
	noax←0 ⋄ axis⍠←noax←1
	noax:'ravel_ibeam'⌶ ⍵
	1≡≢,axis:{
		axis≤¯1:⎕SIGNAL 11
		(≢⍴⍵)≤axis:⎕SIGNAL 4
		is_integer squeeze axis:⍵
		is_numeric axis:((pr↑s),1,(pr←⌈axis)↓s←⍴⍵)⍴⍵
		⎕SIGNAL 11
	}⍵
	0≡≢,axis:((⍴⍵),1)⍴⍵
	~is_integer squeeze axis:⎕SIGNAL 11
	1≢≢⍴axis:⎕SIGNAL 4
	any axis≤¯1:⎕SIGNAL 11
	any (≢⍴⍵)≤axis:⎕SIGNAL 4
	axis≢(⍳c←≢axis)+b←⊃axis:⎕SIGNAL 11
	((b↑s),(×⌿c↑b↓s),(b+c)↓s←⍴⍵)⍴⍵
}
catenate←{
	lr←≢⍴⍺ ⋄ rr←≢⍴⍵ ⋄ rk←lr⌈rr ⋄ hax←1 ⋄ axis⍠←¯1+rk⊣hax←0
	1<ar←≢⍴axis:⎕SIGNAL 4 ⋄ 1≢≢axis:⎕SIGNAL 5 ⋄ ~is_numeric axis:⎕SIGNAL 11
	hax∧axis≤¯1:⎕SIGNAL 11 ⋄ hax∧rk≤axis:⎕SIGNAL 4
	0≡rk:(,⍺),,⍵
	(1<|lr-rr)∧noscl←(lr≢0)∧rr≢0:⎕SIGNAL 4
	axis≠fx←⌈axis:⍺{
		(lr≢0)∧(rr≢0)∧lr≠rr:⎕SIGNAL 4
		(,[axis]⍣(lr≢0)⊢⍺),[fx],[axis]⍣(rr≢0)⊢⍵
	}⍵
	(lr≤1)∧rr≤1:⍺{z←((lc←≢⍺)+rc←≢⍵)⍴⍺ ⋄ z[lc+⍳rc]←⍵ ⋄ z}⍵
	x←⍺{lr≡0:s⍴⍺⊣s[fx]←1⊣s←⍴⍵ ⋄ lr<rr:,[fx-.5]⍺ ⋄ ⍺}⍵
	y←⍺{rr≡0:s⍴⍵⊣s[fx]←1⊣s←⍴⍺ ⋄ rr<lr:,[fx-.5]⍵ ⋄ ⍵}⍵
	(m×⍴x)∨.≠m×⍴y⊣m←fx≠⍳rk:⎕SIGNAL 5
	s[fx]←(⍴x)[fx]+(⍴y)[fx]⊣s←⍴x
	ca←×⌿fx↑s ⋄ cb←fx⌷s ⋄ cc←×⌿(fx+1)↓s ⋄ lx←fx⌷⍴x ⋄ rx←fx⌷⍴y
	z←ca cb cc⍴0 ⋄ z[;⍳lx;]←ca lx cc⍴x ⋄ z[;lx+⍳rx;]←ca rx cc⍴y
	s⍴z
}
cat←ravel ambiv catenate

⍝ Table / Catenate First
table←{((≢⍵),×⌿1↓⍴⍵)⍴⍵}
catenatefirst←{
	hax←1 ⋄ axis⍠←hax←0 ⋄ hax:⍺,[axis]⍵
	(~hax)∧(0≡≢⍴⍺)∧0≡≢⍴⍵:(,⍺),,⍵
	⍺,[0]⍵
}
ctf←table ambiv catenatefirst

⍝ ≡: Depth / Same
depth←{
	is_simple ⍵:{0≡≢⍴⍵:0 ⋄ 1}⍵
	0≡≢,⍵:(×d)+d←∇⊃⍵
	nd←1+mx←⌈⌿pd←|d←∇¨,⍵
	∨⌿(d<0)∨pd≠mx:-nd
	nd
}
same←'same_ibeam'⌶
eqv←depth ambiv same

⍝ ≢: Tally / Not Same
tally←{⍬≡s←⍴⍵:1 ⋄ ⊃s}
notsame←'nqv_ibeam'⌶
nqv←tally ambiv notsame

⍝ ⍳: Index Generate | Index Of
index_gen←{
	chk_valid_shape ⍵: 
	0≡≢,⍵:⊂⍬
	VEC_0≡,⍵:⍬
	1≡≢,⍵:'index_gen_vec'⌶ ⍵
	⊃∘.,⌿⍳¨⍵
}
index_of←{
	0≡≢,⍵:(⍴⍵)⍴⍬ ⋄ 0≡≢,⍺:(⍴⍵)⍴⍬
	(≢⍴⍵)<cr←¯1+≢⍴⍺:⎕SIGNAL 4
	(1↓⍴⍺)≢(1-≢⍴⍺)↑⍴⍵:⎕SIGNAL 5
	1<≢⍴⍺:(⊂⍤¯1⊢⍺)∇⊂⍤cr⊢⍵
	(1<≡⍺)∨(1<≡⍵):+⌿∧⍀⍺∘.≢⍵
	lv←⍺[ix←⍋⍺] ⋄ rv←,⍵ ⋄ zv←(≢,⍵)⍴¯1
	_←{⍵-h⊣zv[i]←t[i←⍸lv[t←zv+h]<rv]⊣h←⌊⍵÷2}⍣(⌈2⍟lc)⊢lc←≢,⍺
	(⍴⍵)⍴ix⊣ix[⍸lv[zv+1]≠rv]←≢,⍺⊣ix←ix[zv+1]
}
iot←index_gen ambiv index_of

⍝ ⊃: First / Pick
first←'disclose_ibeam'⌶
pick←{0≡≢,⍺:⍵ ⋄ (1↓⍺)∇⊃(⊃⍺)⌷⍵}
dis←first ambiv pick

⍝ ⊂: Enclose / Partition
enclose←{
	0≡≡⍵:⍵
	hax←1 ⋄ axis⍠←hax←0 ⋄ hax:(,axis){
		⍺≡⍬:⊂¨⍵
		(rr←≢⍴⍵)idx_rng_check ⍺:
		m←rr⍴1 ⋄ m[⍺]←0 ⋄ m←⍸m ⋄ t←⍳rr ⋄ t[m]←y←⍳≢m ⋄ t[⍺]←(≢m)+⍳≢⍺
		⊂⍤(≢⍺)⊢t⍉⍵
		m←(≢⍴⍵)⍴0 ⋄ _←⍺{i←⍺[⍵] ⋄ m[i]:⎕SIGNAL 11 ⋄ ⍵+m[i]←1}⍣(≢⍺)⊢0
		nax←0⍴⍨(≢⍴⍵)-≢⍺ ⋄ i←0 ⋄ _←{m[⍵]:⍵+1 ⋄ nax[i]←⍵ ⋄ ⍵+i+←1}⍣(≢⍴⍵)⊢0
		(⍳(⍴⍵)[nax])⌷[nax]¨⊂⍵
	}⍵
	'enclose_ibeam'⌶ ⍵
}
part_enc←{
	1<≢⍴⍺:⎕SIGNAL 4
	hax←1 ⋄ axis⍠←¯1+≢⍴⍵⊣hax←0 ⋄ hax(axis chk_axis)⍵:
	0≡≢⍴⍵:⍺∇(≢⍺)⍴⍵ ⋄ ac←(⍴⍵)[axis] ⋄ 0≡≢⍴⍺:(ac⍴⍺)∇⍵
	(≢⍺)>1+ac:⎕SIGNAL 5
	~has_nat_vals ⍺:⎕SIGNAL 11
	2(⍵{(⊂⍺+⍳⍵-⍺)⌷[axis]⍺⍺})⌿(⍸⍺),ac
}
par←enclose ambiv part_enc

⍝ ⊆: Nest
nest←{
	1≡≡⍵:⊂⍵
	⍵
}
partition←{
	1<≢⍴⍺:⎕SIGNAL 4 ⋄ 0≡≢⍴⍵:⎕SIGNAL 4
	hax←1 ⋄ axis⍠←¯1+≢⍴⍵⊣hax←0 ⋄ hax(axis chk_axis)⍵:
	ac←(⍴⍵)[axis] ⋄ 0≡≢⍴⍺:(ac⍴⍺)∇⍵ ⋄ ac≢≢⍺:⎕SIGNAL 5
	~has_nat_vals ⍺:⎕SIGNAL 11
	m←⍺≠0 ⋄ p←m⌿2<⌿0,⍺ ⋄ pi←2{⍺+⍳⍵-⍺}⌿(⍸p),≢p ⋄ mi←⍸m ⋄ pc←≢pi
	lc←×⌿ls←axis↑⍴⍵ ⋄ rc←×⌿rs←(1+axis)↓⍴⍵ ⋄ z←lc pc rc⍴⊂0⍴⊂⊃⍵ ⋄ x←lc ac rc⍴⍵
	(ls,pc,rs)⍴z⊣(⍳lc)∘.{z[⍺;;⍵]←x[⍺;mi;⍵]∘{⍺[⍵]}¨pi}⍳rc
}
nst←nest ambiv partition

⍝ +: Conjugate | Addition
conjugate←{1289≡⎕DR squeeze ⍵:'conjugate_vec_ibeam'⌶ ⍵ ⋄ ⍵}
plus←'add_vec_ibeam'⌶ numeric scalar
add←conjugate ambiv plus

⍝ -: Negate | Subtract
negate←{0-⍵}
minus←'sub_vec_ibeam'⌶ numeric scalar
sub←negate ambiv minus

⍝ ×: Sign | Multiply
sign←{1289=⎕DR ⍵:⍵÷|⍵ ⋄ (-⍵<0)+0<⍵}
times←'mul_vec_ibeam'⌶ numeric scalar
mul←sign ambiv times

⍝ ÷: Reciprocal | Divide
recip←{1÷⍵}
divide←'div_vec_ibeam'⌶ numeric scalar
div←recip ambiv divide

⍝ *: Exponent | Power
exponent←'exp_vec_ibeam'⌶ numeric scl_mon
power←'pow_vec_ibeam'⌶ numeric scalar
exp←exponent ambiv power

⍝ ⍟: Natural Logarithm | Logarithm
natlog←'nlg_vec_ibeam'⌶ numeric scl_mon
logarithm←'log_vec_ibeam'⌶ numeric scalar
log←natlog ambiv logarithm

⍝ |: Absolute Value | Residue
absolute←{1289≡⎕DR ⍵:⎕SIGNAL 11 ⋄ 'abs_vec_ibeam'⌶ ⍵} numeric scl_mon
residue←{2≡⍺:(⍴⍵)⍴1 bitand ⍵ ⋄ ⍵-⍺×⌊⍵÷⍺+0=⍺} numeric scalar
res←absolute ambiv residue

⍝ ⌊: Floor | Minimum
floor_array←{
	is_integer ⍵:⍵
	1289=⎕DR ⍵:{
		a←9○⍵ ⋄ b←11○⍵
		ad←a-fa←⌊a ⋄ bd←b-fb←⌊b ⋄ m←1≤ad+bd
		(fa+m×t)+0J1×fb+m×~t←ad≥bd
	}⍵
	'floor_vec_ibeam'⌶ ⍵
} numeric scl_mon
minimum←'min_vec_ibeam'⌶ numeric scalar
min←floor_array ambiv minimum

⍝ ⌈: Ceiling | Maximum
ceil_array←{
	is_integer ⍵:⍵
	1289=⎕DR ⍵:-⌊-⍵
	'ceil_vec_ibeam'⌶ ⍵
} numeric scl_mon
maximum←'max_vec_ibeam'⌶ numeric scalar
max←ceil_array ambiv maximum

⍝ ○: Pi Times | Trigonometric Functions
pitimes←{3.14159265358979323846×⍵} numeric scl_mon
trig←{
	0≠≡⍺:⍺ ∇¨⍵
	0=⍺:(1-⍵*2)*.5
	1=⍺:'sin_vec_ibeam'⌶ ⍵
	¯1=⍺:'arcsin_vec_ibeam'⌶ ⍵
	2=⍺:'cos_vec_ibeam'⌶ ⍵
	¯2=⍺:'arccos_vec_ibeam'⌶ ⍵
	3=⍺:'tan_vec_ibeam'⌶ ⍵
	¯3=⍺:'arctan_vec_ibeam'⌶ ⍵
	4=⍺:(1+⍵*2)*.5
	¯4=⍺:(⍵+1)×((⍵-1)÷⍵+1)*0.5
	5=⍺:'sinh_vec_ibeam'⌶ ⍵
	¯5=⍺:'arcsinh_vec_ibeam'⌶ ⍵
	6=⍺:'cosh_vec_ibeam'⌶ ⍵
	¯6=⍺:'arccosh_vec_ibeam'⌶ ⍵
	7=⍺:'tanh_vec_ibeam'⌶ ⍵
	¯7=⍺:'arctanh_vec_ibeam'⌶ ⍵
	8=⍺:(-1+⍵*2)*0.5
	¯8=⍺:-8○⍵
	9=⍺:{1289≡⎕DR ⍵:'realpart_vec_ibeam'⌶ ⍵ ⋄ ⍵}⍵
	¯9=⍺:⍵
	10=⍺:|⍵
	¯10=⍺:+⍵
	11=⍺:{1289≡⎕DR ⍵:'imagpart_vec_ibeam'⌶ ⍵ ⋄ (⍴⍵)⍴0}⍵
	¯11=⍺:⍵×0J1
	12=⍺:'PHASE(⍵) NOT IMPLEMENTED'⎕SIGNAL 16
	¯12=⍺:*⍵×0J1
	⎕SIGNAL 11
} numeric scalar
cir←pitimes ambiv trig

⍝ !: Factorial | Binomial
factorial←'factorial_vec_ibeam'⌶ numeric scl_mon
binomial←{
	∨⌿,(⍵=⌊⍵)∧(⍵<0)∧⍺≠⌊⍺:⎕SIGNAL 11
	(!⍵)÷(!⍺)×!⍵-⍺
} numeric scalar
fac←factorial ambiv binomial

⍝ ~: Not | Without
notscl←{is_bool ⍵:'not_vec_ibeam'⌶ ⍵ ⋄ ⎕SIGNAL 11} scl_mon
without←{1<≢⍴⍺:⎕SIGNAL 11 ⋄ (~⍺∊⍵)⌿⍺}
not←notscl ambiv without

⍝ ∧: And
andmon←{⎕SIGNAL 2}
logand←{
	⍺ both_bool ⍵:⍺('and_vec_ibeam'⌶)⍵
	⍺×⍵÷⍺∨⍵
} numeric scalar
and←andmon ambiv logand

⍝ ∨: Or
lormon←{⎕SIGNAL 2}
rational←{
	r←⍵ ⋄ s←⍴⍵ ⋄ c20←s⍴0 ⋄ c21←s⍴1 ⋄ c10←s⍴1 ⋄ c11←s⍴0
	{
		an←⌊⍵ ⋄ c0←c20+an×c10 ⋄ c1←c21+an×c11
		~∨⌿m←r≠c0÷c1:c0 c1
		i←⍸m ⋄ c20[i]←c10[i] ⋄ c21[i]←c11[i] ⋄ c10[i]←c0[i] ⋄ c11[i]←c1[i]
		x←⍵ ⋄ x[i]←÷x[i]-an[i]
		∇ x
	}⍵
}
gcd←{⍺≡⍺+⍺:⍵ ⋄ b ∇ (b←⍺⌊⍵)|⍺⌈⍵}
lcm←{⍺×⍵÷⍺ gcd ⍵}
logor←{
	⍺ both_bool ⍵:⍺('lor_vec_ibeam'⌶)⍵
	(is_bool ⍺)∧is_integer ⍵:⍺+(~⍺)×|⍵
	(is_bool ⍵)∧is_integer ⍺:⍵+(~⍵)×|⍺
	⍺ both_integer ⍵:(|⍺)gcd(|⍵)
	y←rational |,⍺ ⋄ a←(⍴⍺)⍴0⊃y ⋄ b←(⍴⍺)⍴1⊃y
	x←rational |,⍵ ⋄ c←(⍴⍵)⍴0⊃x ⋄ d←(⍴⍵)⍴1⊃x
        (a gcd c)÷b lcm d
} numeric scalar
lor←lormon ambiv logor

⍝ ⍲: Not and
nanmon←{⎕SIGNAL 2}
lognan←{⍺ both_bool ⍵:~⍺∧⍵ ⋄ ⎕SIGNAL 11} scalar
nan←nanmon ambiv lognan

⍝ ⍱: Not Or
normon←{⎕SIGNAL 2}
lognor←{⍺ both_bool ⍵:~⍺∨⍵ ⋄ ⎕SIGNAL 11} scalar
nor←normon ambiv lognor

⍝ <: Less than
lthmon←{⎕SIGNAL 2}
lessthan←{
	1289≡⎕DR ⍵:⎕SIGNAL 11 ⋄ 1289≡⎕DR ⍺:⎕SIGNAL 11
	⍺('lth_vec_ibeam'⌶)⍵
} numeric scalar
lth←lthmon ambiv lessthan

⍝ ≤: Less than or equal
ltemon←{⎕SIGNAL 2}
lesseql←{
	1289≡⎕DR ⍵:⎕SIGNAL 11 ⋄ 1289≡⎕DR ⍺:⎕SIGNAL 11
	⍺('lte_vec_ibeam'⌶)⍵
} numeric scalar
lte←ltemon ambiv lesseql

⍝ =: Equal
eqlmon←{⎕SIGNAL 2}
eql_vec←'eql_vec_ibeam'⌶
equal←{
	⍺ both_numeric ⍵:⍺ eql_vec ⍵
	⍺ both_char ⍵:⍺ eql_vec ⍵
	0
} scalar
eql←eqlmon ambiv equal

⍝ ≥: Greater than or equal
gtemon←{⎕SIGNAL 2}
greatereql←{
	1289≡⎕DR ⍵:⎕SIGNAL 11 ⋄ 1289≡⎕DR ⍺:⎕SIGNAL 11
	⍺('gte_vec_ibeam'⌶)⍵
} numeric scalar
gte←gtemon ambiv greatereql

⍝ >: Greater than
gthmon←{⎕SIGNAL 2}
greaterthan←{
	1289≡⎕DR ⍵:⎕SIGNAL 11 ⋄ 1289≡⎕DR ⍺:⎕SIGNAL 11
	⍺('gth_vec_ibeam'⌶)⍵
} numeric scalar
gth←gthmon ambiv greaterthan

⍝ ≠: Not Equal | First Occurrence
firstocc←{(⍳≢⍵)=⍵⍳⍵}
neq_vec←'neq_vec_ibeam'⌶
noteq←{
	⍺ both_numeric ⍵:⍺ neq_vec ⍵
	⍺ both_char ⍵:⍺ neq_vec ⍵
	1
} scalar
neq←firstocc ambiv noteq

⍝ ↑: Mix | Take
mix←{
	1≥≡squeeze ⍵:⍵
	0≡≢,⍵:((⍴⍵),⍴v)⍴v←⊃⍵
	k←⌈⌿≢∘⍴¨v←,⍵ ⋄ v←{s←k⍴1 ⋄ s[⍳≢⍴⍵]←⍴⍵ ⋄ s⍴⍵}¨v ⋄ s←⊃⌈⌿⍴¨v
	((⍴⍵),s)⍴z⊣v{⍵+1⊣'sqdset_ibeam'⌶ z(⍵,⍳¨⍴x)(x←⍵⊃⍺)}⍣(≢,⍵)⊢0⊣z←((≢,⍵),s)⍴0⍴⊃⍵
}
take←{
	1<≢⍴⍺:⎕SIGNAL 4
	hax←1 ⋄ axis⍠←⍳≢⍺⊣hax←0
	1<≢⍴axis:⎕SIGNAL 4 ⋄ ~has_nat_vals axis:⎕SIGNAL 11
	(≢,⍺)≢≢,axis:⎕SIGNAL 5 ⋄ ~is_integer squeeze ⍺:⎕SIGNAL 11
	x←⍺ ⋄ y←⍺{(~hax)∧0≡≢⍴⍵:((≢⍺)⍴1)⍴⍵ ⋄ ⍵}⍵ 
	any(axis<0)∨axis≥≢⍴y:⎕SIGNAL 4
	~any(|x)>(⍴y)[axis]:((⍳¨|x)+(x<0)×(⍴y)[axis]-|x)⌷[axis]y
	s←⍴y ⋄ s[axis]←x ⋄ m←s<0 ⋄ s←|s
	z←s⍴0⍴y ⋄ i←(wi←⍳¨w)+m×s-w←s⌊⍴y ⋄ v←(wi+m×(⍴y)-w)⌷y
	'sqdset_ibeam'⌶ z i v
}
tke←mix ambiv take

⍝ ↓: Split | Drop
split←{
	0≡≡⍵:⍵
	hax←1 ⋄ axis⍠←¯1+≢⍴⍵⊣hax←0 ⋄ hax(axis chk_axis)⍵:
	lc←×⌿ls←axis↑⍴⍵ ⋄ rc←×⌿rs←(1+axis)↓⍴⍵ ⋄ ac←axis⌷⍴⍵ ⋄ z←lc ac rc⍴⍵
	(ls,rs)⍴(⍳lc)∘.{z[⍺;;⍵]}⍳rc
}
drop←{
	1<≢⍴⍺:⎕SIGNAL 4
	hax←1 ⋄ axis⍠←⍳≢⍺⊣hax←0 
	1<≢⍴axis:⎕SIGNAL 4 ⋄ ~has_nat_vals axis:⎕SIGNAL 11
	(≢,⍺)≢≢,axis:⎕SIGNAL 5 ⋄ ~is_integer squeeze ⍺:⎕SIGNAL 11
	x←⍺ ⋄ y←⍺{(~hax)∧0≡≢⍴⍵:((≢⍺)⍴1)⍴⍵ ⋄ ⍵}⍵ 
	any(axis<0)∨axis≥≢⍴y:⎕SIGNAL 4
	((0⌈x)+⍳¨0⌈(⍴y)[axis]-|x)⌷[axis]y
}
drp←split ambiv drop

⍝ ⊖: Rerverse First | Rotate First
reverse_axis←{0≡≢⍴⍵:⍵ ⋄ axis⍠←0 ⋄ 1≡≢,⍵:⍵ ⋄ s←(⍴⍵)[axis] ⋄ (⊂s-1+⍳s)⌷[axis]⍵}
rotate_axis←{
	0≡≢⍴⍵:⍵ ⋄ axis⍠←0 ⋄ lns←1≢≢,⍺
	lns∧(≢⍴⍺)≢(≢⍴⍵)-1:⎕SIGNAL 4
	lns∧(⍴⍺)≢(axis≠⍳≢⍴⍵)⌿⍴⍵:⎕SIGNAL 5
	ac←(⍴⍵)[axis] ⋄ lc←×⌿(axis+1)↓⍴⍵ ⋄ ix←⍳≢,⍵
	1≡≢,⍵:⍵ ⋄ 1≡≢,⍺:(⊂ac|⍺+⍳ac)⌷[axis]⍵
	si←(lc|ix)+lc×(ac|(⌊ix÷lc)+,ac⌿[axis],[axis-.5]⍺)+ac×⌊ix÷lc×ac	
	(⍴⍵)⍴(,⍵)[si]
}
reverse_first←{hax←1 ⋄ axis⍠←hax←0 ⋄ hax(axis chk_axis)⍵: ⋄ reverse_axis[axis] ⍵}
rotate_first←{hax←1 ⋄ axis⍠←hax←0 ⋄ hax(axis chk_axis)⍵: ⋄ ⍺ rotate_axis[axis] ⍵}
rtf←reverse_first ambiv rotate_first

⍝ ⌽: Reverse Last | Rotate Last
reverse_last←{hax←1 ⋄ axis⍠←0⌈¯1+≢⍴⍵⊣hax←0 ⋄ hax(axis chk_axis)⍵: ⋄ reverse_axis[axis] ⍵}
rotate_last←{hax←1 ⋄ axis⍠←0⌈¯1+≢⍴⍵⊣hax←0 ⋄ hax(axis chk_axis)⍵: ⋄ ⍺ rotate_axis[axis] ⍵}
rot←reverse_last ambiv rotate_last

⍝ ⍉: Transpose
transpose←{s←⌽⍴⍵ ⋄ 1≥≢⍴⍵:⍵ ⋄ s⍴(,⍵)[(⍴⍵)⊥⊖s⊤⍳≢,⍵]}
transpose_target←{
	1<≢⍴⍺:⎕SIGNAL 5 ⋄ (≢⍴⍵)≢≢,⍺:⎕SIGNAL 5 ⋄ ~is_integer ⍺:⎕SIGNAL 11
	any 0>⍺:⎕SIGNAL 4 ⋄ tr←0⌈1+⌈⌿⍺ ⋄ tr>≢⍴⍵:⎕SIGNAL 4 
	ts←tr⍴1 ⋄ ts[⍺]←0 ⋄ any 0≠ts:⎕SIGNAL 5
	1≥≢⍴⍵:⍵
	ts[⍺]←⍴⍵ ⋄ _←⍺{ts[⍺]⌊←⍵}¨⍴⍵
 	ts⍴(,⍵)[(⍴⍵)⊥(⊂⍺)⌷ts⊤⍳×⌿ts]
}
trn←transpose ambiv transpose_target

⍝ ⍋: Grade Up
⍝ Q ← {1≥≢⍵:⍵ ⋄ s←⍵ ⍺⍺ ⍵⌷⍨⊂?≢⍵ ⋄ (∇ ⍵⌿⍨0>s)⍪(⍵⌿⍨0=s)⍪(∇ ⍵⌿⍨0<s)}      ⍝ (RKWH)
⍝ qsort ← {⍺⍺{(⍵ ⍺⍺ ⍺)-(⍺ ⍺⍺ ⍵)}⍤¯1 999 Q ⍵}
⍝ grade←{| ⊢/↑ ⍺⍺ qsort ⍵ {⍺ ⍵}¨ ⍵⍵ ⍳⍴⍵}  
⍝ gu ← le grade +                             ⍝ grade-up   ⍋
⍝ gd ← ge grade - 

gdu←{
	1>≢⍴⍵:⎕SIGNAL 4 ⋄ 0≡≢,⍵:⍬ ⋄ 1≢≡⍵:⎕SIGNAL 16
	z⊣{z⊢←a[z;⍵]('gradeup_vec_ibeam'⌶)z}¨⌽⍳1⌷⍴a←⍪⍵⊣z←⍳≢⍵
}

⍝ ⍒: Grade Down
gdd←{
	1>≢⍴⍵:⎕SIGNAL 4 ⋄ 0≡≢,⍵:⍬ ⋄ 1≢≡⍵:⎕SIGNAL 16
	z⊣{z⊢←a[z;⍵]('gradedown_vec_ibeam'⌶)z}¨⌽⍳1⌷⍴a←⍪⍵⊣z←⍳≢⍵
}

⍝ ≤≥ Sort Up/Down
sortup←{(⊂⍋⍵)⌷⍵}
sortdown←{(⊂⍒⍵)⌷⍵}

⍝ ⊤: Encode
encmon←{⎕SIGNAL 2}
enc←{
	~is_numeric ⍺:⎕SIGNAL 11 ⋄ ~is_numeric ⍵:⎕SIGNAL 11
	d←⍪⍺ ⋄ z←((⍴d),≢,⍵)⍴0⍴⍵ ⋄ sd←(⍳≢d),⊂,⍵
	_←sd{⍵+1⊣d[;⍵]{((v≠0)×⌊⍵÷v+v=0)⊣z[⍺;⍵⍵;]←⍵|⍨v←⍺⍺[⍺]}⍵⌿⍺⍺}⍣(1⌷⍴d)⊢0
	((⍴⍺),⍴⍵)⍴z
}

⍝ ⊥: Decode
decmon←{⎕SIGNAL 2}
dec←{
	(0≢≢⍴⍺)∧(0≢≢⍴⍵)∧(1≢lc)∧(1≢rc)∧(rc←≢⍵)≢lc←1⌈⊃⌽⍴⍺:⎕SIGNAL 5
	s←(¯1↓⍴⍺),1↓⍴⍵
	(0≡≢,⍺)∨0≡≢,⍵:s⍴0
	~(squeeze ⍺)both_numeric squeeze ⍵:⎕SIGNAL 11
	lv←⍺{1≡lc:rc/⍺ ⋄ ⍺}⍵
	rv←⍺{1≡rc:lc⌿⍵ ⋄ ⍵}⍵
	rv+.×⍨⌽×\1,⌽1↓[¯1+≢⍴lv]lv
}

⍝ ∊: Membership
enlist←{
	1≥|≡⍵:,⍵
	⊃⍪⌿∇¨,⍵
}
member←{(≢,⍵)≠(,⍵)⍳⍺}
mem←enlist ambiv member

⍝ ⍷: Find
fnd←{
	(0≡≢,⍵)∨((lr←≢⍴⍺)>rr←≢⍴⍵)∨any(⍴⍺)>(-≢⍴⍺)↑⍴⍵:(⍴⍵)⍴0 ⋄ 0≡≢,⍺:(⍴⍵)⍴1
	(⍴⍵)↑(((rr↑⍴x),×⌿w)⍴x←(w←((0⌈rr-lr)⍴1),⍴⍺)⌺⍵)∧.=,⍺
}

⍝ ∪: Unique | Union
unique←{0≡≢⍴⍵:,⍵ ⋄ 1≡≢⍵:⍵ ⋄ ⍵⌿⍨(⍳≢⍵)=⍵⍳⍵}
union←{1<≢⍴⍺:⎕SIGNAL 4 ⋄ 1<≢⍴⍵:⎕SIGNAL 4 ⋄ ⍺⍪⍵⌿⍨(≢⍺)=(,⍺)⍳⍵}
unq←unique ambiv union

⍝ ∩: Intersection
intmon←{⎕SIGNAL 2}
int←{1<≢⍴⍺:⎕SIGNAL 4 ⋄ 1<≢⍴⍵:⎕SIGNAL 4 ⋄ ⍺⌿⍨⍺∊⍵}

⍝ ⌺: Stencil
stn←{
	1≥≢⍴⍺:⍺{
		r←≢w←⍺ ⋄ a←⍵
		si←⍳¨s←1+(r↑⍴a)-w ⋄ wi←w⊤⍳c←×⌿w ⋄ st←(sc←×⌿s)(tc←×⌿ts←r↓⍴a)
		(s,w,ts)⍴z⊣{⍵+1⊣z[;⍵;]←st⍴(wi[;⍵]+si)⌷a}⍣c⊢0⊣z←sc c tc⍴⊃⍵
	}⍵
	r←≢w←0⌷⍺ ⋄ s←1⌷⍺ ⋄ a←⍵ ⋄ p←⌈s÷⍨(r↑⍴a)-w-1 ⋄ ts←r↓⍴a
	(i,(⍳≢ts)+≢i←,i,⍪r+i←⍳r)⍉(ts,⍨,p,⍪s)⍴(p×s)↑⍵
}

⍝ ?: Roll | Deal
deal←{
	(0≢≢⍴squeeze ⍺)∨(0≢≢⍴squeeze ⍵):⎕SIGNAL 5
	~⍺ both_integer ⍵:⎕SIGNAL 11
	(⍺>⍵)∨(⍺<0)∨⍵<0:⎕SIGNAL 11 ⋄ 0≡⍺:⍬
	d←⍳⍵ ⋄ s{⊃d[⍺ ⍵]←d[⍵ ⍺]}¨s+?⍵-s←⍳⍺
}
roll←{
	~is_integer squeeze ⍵:⎕SIGNAL 11
	0≡≢,⍵:(⍴⍵)⍴⍬
	any ⍵<0:⎕SIGNAL 11
	(rnd×⍵=0)+⌊⍵×rnd←(⍴⍵)⍴'roll_ibeam'⌶ ⍵
}
rol←roll ambiv deal

⍝ ⌹: Matrix Division  (ATA)−1 AT
matinv←{
	2<≢⍴⍵:⎕SIGNAL 4 ⋄ 0≡≢,⍵:⎕SIGNAL 5 ⋄ x←⍪⍵ ⋄ (⍴x)[0]<(⍴x)[1]:⎕SIGNAL 5
	(⍴x)[0]≡(⍴x)[1]:(⍴⍵)⍴'matrix_inverse_ibeam'⌶ x
	(⌹tx+.×⍵)+.×tx←⍉x
}
matdiv←{x←⍪⍺ ⋄ y←⍪⍵
	2<≢⍴⍵:⎕SIGNAL 4 ⋄ 2<≢⍴⍺:⎕SIGNAL 4 ⋄ (⍴y)[0]<(⍴y)[1]:⎕SIGNAL 5
	0≡≢,⍵:⎕SIGNAL 5 ⋄ 0≡≢,⍺:⎕SIGNAL 5 ⋄ (0<≢⍴⍵)∧(0<≢⍴⍺)∧(≢⍵)≢≢⍺:⎕SIGNAL 5
	((1↓⍴⍵)⍪1↓⍴⍺)⍴(⌹(+⍉y)+.×y)+.×(+⍉y)+.×x
}
mdv←matinv ambiv matdiv

⍝ ⍨: Commute
com←{2=⎕NC'⍺⍺':⍺⍺ ⋄ ⍺←⍵ ⋄ ⍵ ⍺⍺ ⍺}

⍝ ¨: Each
is_scalar←{
	⍺⍺ eq + ⍬:1
	⍺⍺ eq - ⍬:1
	⍺⍺ eq × ⍬:1
	⍺⍺ eq ÷ ⍬:1
	⍺⍺ eq | ⍬:1
	⍺⍺ eq ⌊ ⍬:1
	⍺⍺ eq ⌈ ⍬:1
	⍺⍺ eq * ⍬:1
	⍺⍺ eq ⍟ ⍬:1
	⍺⍺ eq ○ ⍬:1
	⍺⍺ eq ! ⍬:1
	0
}
is_scalar_mon←{
	⍺⍺ is_scalar ⍬:1
	⍺⍺ eq ~ ⍬:1
	⍺⍺ eq ? ⍬:1
	0
}
is_scalar_dya←{
	⍺⍺ is_scalar ⍬:1
	⍺⍺ eq ∧ ⍬:1
	⍺⍺ eq ∨ ⍬:1
	⍺⍺ eq ⍲ ⍬:1
	⍺⍺ eq ⍱ ⍬:1
	⍺⍺ eq < ⍬:1
	⍺⍺ eq ≤ ⍬:1
	⍺⍺ eq = ⍬:1
	⍺⍺ eq ≥ ⍬:1
	⍺⍺ eq > ⍬:1
	⍺⍺ eq ≠ ⍬:1
	0
}
map←{⍺←⊢ ⋄ op←⍺⍺
	1≡⍺ 1:⍺{
		op is_scalar_mon ⍬:op ⍵
		(⍴⍵)⍴squeeze op veach ⍵
	}⍵
	op is_scalar_dya ⍬:⍺ op ⍵
	(⍺ chk_scl ⍵)⍴squeeze ⍺ ⍺⍺ veach ⍵
}

⍝ ⌿: Reduce First | N-wise Reduce First
identity←{
	⍺⍺ eq + ⍬:0
	⍺⍺ eq - ⍬:0
	⍺⍺ eq × ⍬:1
	⍺⍺ eq ÷ ⍬:1
	⍺⍺ eq | ⍬:0
	⍺⍺ eq ⌊ ⍬:1.7976931348623157E308
	⍺⍺ eq ⌈ ⍬:¯1.7976931348623157E308
	⍺⍺ eq * ⍬:1
	⍺⍺ eq ! ⍬:1
	⍺⍺ eq ∧ ⍬:1
	⍺⍺ eq ∨ ⍬:0
	⍺⍺ eq < ⍬:0
	⍺⍺ eq ≤ ⍬:1
	⍺⍺ eq = ⍬:1
	⍺⍺ eq ≥ ⍬:1
	⍺⍺ eq > ⍬:0
	⍺⍺ eq ≠ ⍬:0
	⍺⍺ eq ⊤ ⍬:0
	⍺⍺ eq ∪ ⍬:⊂⍬
	⍺⍺ eq ⌿ ⍬:1
	⍺⍺ eq / ⍬:1
	⍺⍺ eq \ ⍬:1
	⍺⍺ eq ⍀ ⍬:1
	⍺⍺ eq ⌽ ⍬:0
	⍺⍺ eq ⊖ ⍬:0
	⎕SIGNAL 16
}
reduce_axis←{axis←⍵⍵ ⋄ op←⍺⍺
	0≡≢⍴⍵:0∇,⍵ ⋄ s←⍴⍵
	0≡≢,⍵:((axis↑s),(axis+1)↓s)⍴⍺⍺ identity ⍬
	1≡c←s[axis]:((axis↑s),(axis+1)↓s)⍴⍵
	⍺⍺ eq ⊢ ⍬:(c-1)⌷[axis]⍵
	⍺⍺ eq ⊣ ⍬:0⌷[axis]⍵
	gen_red←{⍵{((c⊢←c-1)⌷[axis]⍺)op¨⍵}⍣c⊢(c←c-1)⌷[axis]⍵}
	is_char ⍵:gen_red ⍵ ⋄ ~is_simple ⍵:gen_red ⍵
	ib←is_bool ⍵ ⋄ ir←~is_cmpx ⍵
	1≡≢⍴⍵:{
		op eq + ⍬:{ib:'count_vec'⌶ ⍵ ⋄ 'sum_vec'⌶ ⍵}⍵
		op eq × ⍬:{ib:'all_true_vec'⌶ ⍵ ⋄ 'product_vec'⌶ ⍵}⍵
		ir∧op eq ⌊ ⍬:{ib:'all_true_vec'⌶ ⍵ ⋄ 'min_vec'⌶ ⍵}⍵
		ir∧op eq ⌈ ⍬:{ib:'any_true_vec'⌶ ⍵ ⋄ 'max_vec'⌶ ⍵}⍵
		ib∧op eq ∧ ⍬:'all_true_vec'⌶ ⍵
		ib∧op eq ∨ ⍬:'any_true_vec'⌶ ⍵
		ib∧op eq ≠ ⍬:⍬⍴1 bitand 'count_vec'⌶ ⍵
		gen_red ⍵
	}⍵
	lc←×⌿ls←axis↑s ⋄ rc←×⌿rs←(axis+1)↓s ⋄ zs←ls,rs
	⍺⍺ eq + ⍬:zs⍴{ib:'count_array'⌶ ⍵ ⋄ 'sum_array'⌶ ⍵}lc c rc⍴⍵
	⍺⍺ eq × ⍬:zs⍴{ib:'all_true_array'⌶ ⍵ ⋄ 'product_array'⌶ ⍵}lc c rc⍴⍵
	ir∧⍺⍺ eq ⌊ ⍬:zs⍴{ib:'all_true_array'⌶ ⍵ ⋄ 'min_array'⌶ ⍵}lc c rc⍴⍵
	ir∧⍺⍺ eq ⌈ ⍬:zs⍴{ib:'any_true_array'⌶ ⍵ ⋄ 'max_array'⌶ ⍵}lc c rc⍴⍵
	ib∧⍺⍺ eq ∧ ⍬:zs⍴'all_true_array'⌶ lc c rc⍴⍵
	ib∧⍺⍺ eq ∨ ⍬:zs⍴'any_true_array'⌶ lc c rc⍴⍵
	ib∧⍺⍺ eq ≠ ⍬:zs⍴1 bitand 'count_array'⌶ lc c rc⍴⍵
	gen_red ⍵
}
nwreduce_axis←{op←⍺⍺¨ ⋄ axis←⍵⍵ ⋄ rc←1+(⍴⍵)[axis]
	1<≢⍴⍺:⎕SIGNAL 4 ⋄ 1≢≢,⍺:⎕SIGNAL 5
	0≡is_integer ⍺:⎕SIGNAL 11 ⋄ (|⍺)>rc:⎕SIGNAL 5
	0=⍺:(s⊣s[axis]+←1⊣s←⍴⍵)⍴⍺⍺ identity ⍬ ⋄ 1=|⍺:⍵
	rc-←|⍺ ⋄ stp←{z⊢←((⊂⍺+⍳rc)⌷[axis]⍵)op z}
	⍺<0:z⊣(1+⍳¯1+|⍺)stp¨⊂⍵⊣z←rc↑[axis]⍵
	z⊣(⌽⍳⍺-1)stp¨⊂⍵⊣z←(⍺-1)↓[axis]⍵
}
reduce_first←{hax←1 ⋄ axis⍠←0⊣hax←0 ⋄ hax(axis chk_axis)⍵: ⋄ (⍺⍺ reduce_axis axis)⍵}
nwreduce_first←{hax←1 ⋄ axis⍠←0⊣hax←0 ⋄ hax(axis chk_axis)⍵: ⋄ ⍺(⍺⍺ nwreduce_axis axis)⍵}
rdf←{⍺←⊢ ⋄ hax←1 ⋄ axis⍠←0⊣hax←0 ⋄ hax(axis chk_axis)⍵:
	1≡⍺ 1:(⍺⍺ reduce_axis axis)⍵ ⋄ ⍺(⍺⍺ nwreduce_axis axis)⍵
}

⍝ /: Reduce | N-wise Reduce
reduce_last←{hax←1 ⋄ axis⍠←0⌈¯1+≢⍴⍵⊣hax←0 ⋄ hax(axis chk_axis)⍵: ⋄ (⍺⍺ reduce_axis axis)⍵}
nwreduce_last←{hax←1 ⋄ axis⍠←0⌈¯1+≢⍴⍵⊣hax←0 ⋄ hax(axis chk_axis)⍵: ⋄ ⍺(⍺⍺ nwreduce_axis axis)⍵}
red←{⍺←⊢ ⋄ hax←1 ⋄ axis⍠←0⌈¯1+≢⍴⍵⊣hax←0 ⋄ hax(axis chk_axis)⍵:
	1≡⍺ 1:hax(⍺⍺ reduce_axis axis)⍵ ⋄ ⍺(⍺⍺ nwreduce_axis axis)⍵
}

⍝ ⍸: Where/Interval Index
where_nz←'where_nz_ibeam'⌶
where←{
	1<≢⍴⍵:(,⍳⍴⍵)[⍸,⍵]
	0≡≢,⍵:⍬
	~is_numeric ⍵:⎕SIGNAL 11 ⋄ any ⍵<0:⎕SIGNAL 11
	0≡≢i←where_nz ⍵:⍬
	sx←+⍀x←(,⍵)[i] ⋄ (≢i)≡c←sx[0⌈¯1+≢i]:i
	+⍀z⊣z[0,¯1↓sx]←i-0,¯1↓i⊣z←c⍴0
}
interval_idx←{
	1<≢⍴⍺:⎕SIGNAL 16 ⋄ 1<≡⍺:⎕SIGNAL 16 ⋄ 1<≡⍵:⎕SIGNAL 16
	0=≢⍴⍺:⎕SIGNAL 4
	(is_char ⍺)∨is_char ⍵:⎕SIGNAL 16
	0≡≢⍵:⍬ ⋄ 0≡≢⍺:(≢⍵)⍴⍬ ⋄ any 2>⌿⍺:⎕SIGNAL 11
	lv←⍺ ⋄ rv←,⍵ ⋄ zv←(≢,⍵)⍴¯1
	_←{⍵-h⊣zv[i]←t[i←⍸lv[t←zv+h]≤rv]⊣h←⌈⍵÷2}⍣(⌈2⍟lc)⊢lc←≢lv
	(⍴⍵)⍴zv+m×lv[zv+m←zv≠lc-1]≤rv
}
iou←where ambiv interval_idx

⍝ ⌿⌿: Replicate First
rpfmon←{⎕SIGNAL 2}
rpf←{
	hax←1 ⋄ axis⍠←hax←0 ⋄ hax(axis chk_axis)⍵:
	noscl←{0≡≢⍴⍵:,⍵ ⋄ ⍵} ⋄ x←noscl ⍺ ⋄ y←noscl ⍵
	1<≢⍴⍺:⎕SIGNAL 4 ⋄ (0≢≢x)∧~is_integer x:⎕SIGNAL 11
	(ya≢≢x)∧(1≢≢x)∧1≢ya←(⍴y)[axis]:⎕SIGNAL 5
	ac←ya{(⍺⌈⍵)×⍺ ⍵∧.≠0}≢x ⋄ x←ac⍴x
	s←⍴z←(⊂(ya≠1)×i←⍸|x)⌷[axis]y ⋄ ls←×⌿axis↑s ⋄ rs←×⌿(axis+1)↓s
	z←ls(s[axis])rs⍴z ⋄ z[;⍸x[i]<0;]←⊂⊃0⍴,y ⋄ s⍴z
}

⍝ //: Replicate
repmon←{⎕SIGNAL 2}
rep←{
	hax←1 ⋄ axis⍠←0⌈¯1+≢⍴⍵⊣hax←0 ⋄ hax(axis chk_axis)⍵:
	noscl←{0≡≢⍴⍵:,⍵ ⋄ ⍵} ⋄ x←noscl ⍺ ⋄ y←x{1≡≢,⍵:(⍴⍺)⍴⍵ ⋄ ⍵}noscl ⍵
	x⌿[axis]y	
}

⍝ ⍀: Scan First
scan←{axis←⍵⍵ ⋄ fn←⍺⍺ ⋄ hax←⍺ ⋄ hax(axis chk_axis)⍵:
	0≡≢⍴⍵:⍵ ⋄ 1≡≢,⍵:⍵ ⋄ (0≡≢,⍵)∨1≡(⍴⍵)[axis]:⍵
	1≥≢⍴⍵:{
		vec_gen←{squeeze (⍴⍵)⍴{fn⌿x[⍳⍵]}¨1+⍳≢x←⍵}
		is_char ⍵:vec_gen ⍵ ⋄ ~is_simple ⍵:vec_gen ⍵
		ib←is_bool ⍵ ⋄ ir←~is_cmpx ⍵
		fn eq + ⍬:'plus_scan_vec'⌶ ⍵
		fn eq × ⍬:'times_scan_vec'⌶ ⍵
		ir∧fn eq ⌊ ⍬:'min_scan_vec'⌶ ⍵
		ir∧fn eq ⌈ ⍬:'max_scan_vec'⌶ ⍵
		ib∧fn eq ∧ ⍬:'min_scan_vec'⌶ ⍵
		ib∧fn eq ∨ ⍬:'max_scan_vec'⌶ ⍵
		ib∧fn eq ≠ ⍬:1 bitand 'plus_scan_vec'⌶ ⍵
		vec_gen ⍵
	}⍵
	c←(⍴⍵)[axis] ⋄ ls←×⌿axis↑⍴⍵ ⋄ rs←×⌿(axis+1)↓⍴⍵ ⋄ x←ls c rs⍴⍵
	⍝ arr_gen←{squeeze(⍴⍵)⍴z⊣{z[;⍵;]←fn⌿[1]x[;⍳1+⍵;]}¨⍳c⊣z←ls c rs⍴⊃⍵}
	arr_gen←{squeeze(⍴⍵)⍴z⊣{⍵+1⊣z[;⍵;]←fn⌿[1]x[;⍳1+⍵;]}⍣c⊢0⊣z←ls c rs⍴⊃⍵}
	is_char ⍵:arr_gen ⍵ ⋄ ~is_simple ⍵:arr_gen ⍵
	ib←is_bool ⍵ ⋄ ir←~is_cmpx ⍵
	⍺⍺ eq + ⍬:(⍴⍵)⍴'plus_scan_array'⌶ x
	⍺⍺ eq × ⍬:(⍴⍵)⍴'times_scan_array'⌶ x
	ir∧⍺⍺ eq ⌊ ⍬:(⍴⍵)⍴'min_scan_array'⌶ x
	ir∧⍺⍺ eq ⌈ ⍬:(⍴⍵)⍴'max_scan_array'⌶ x
	ib∧⍺⍺ eq ∧ ⍬:(⍴⍵)⍴'min_scan_array'⌶ x
	ib∧⍺⍺ eq ∨ ⍬:(⍴⍵)⍴'max_scan_array'⌶ x
	ib∧⍺⍺ eq ≠ ⍬:(⍴⍵)⍴1 bitand 'plus_scan_array'⌶ x
	arr_gen ⍵
}
scfdya←{⎕SIGNAL 2}
scf←{hax←1 ⋄ axis⍠←hax←0 ⋄ hax ⍺⍺ scan axis⊢⍵}
	
⍝ \: Scan
scndya←{⎕SIGNAL 2}
scn←{hax←1 ⋄ axis⍠←0⌈¯1+≢⍴⍵⊣hax←0 ⋄ hax ⍺⍺ scan axis⊢⍵}

⍝ ⍀⍀: Expand First
xpfmon←{⎕SIGNAL 2}
xpf←{
	hax←1 ⋄ axis⍠←hax←0 ⋄ hax(axis chk_axis)⍵:
	0≡≢⍴⍵:⍺∇,⍵ ⋄ 1<≢⍴⍺:⎕SIGNAL 4 ⋄ as←(⍴⍵)[axis]
	0≡≢⍺:⍺{0≡as:⍵ ⋄ 1≡as:s⍴⍵⊣s[axis]←0⊣s←⍴⍵ ⋄ ⎕SIGNAL 5}⍵
	1≡as:(⊂(1⌈|⍺)⌿⍺>0)⌷[axis]¯2↑[axis]⍵
	as≢z[¯1+≢z←+⍀m←⍺>0]:⎕SIGNAL 5
	(⊂(1⌈|⍺)⌿m×z)⌷[axis](-1+as)↑[axis]⍵
}

⍝ \\: Expand Last
xpdmon←{⎕SIGNAL 2}
xpd←{
	hax←1 ⋄ axis⍠←0⌈¯1+≢⍴⍵⊣hax←0 ⋄ hax(axis chk_axis)⍵:
	0≡≢⍴⍵:⍺∇,⍵ ⋄ ⍺⍀[axis]⍵
}

⍝ ∘.: Outer Product
oup←{i←⍳c←(≢,⍺)×y←≢,⍵ ⋄ ((⍴⍺),⍴⍵)⍴(,⍺)[⌊i÷y]⍺⍺¨c⍴⍵}

⍝ .: Inner Product
dot_prod←'dot_prod_ibeam'⌶
matmul←'matmul_ibeam'⌶
dot←{
	f←⍺⍺ ⋄ g←⍵⍵ ⋄ lr←≢⍴⍺ ⋄ rr←≢⍴⍵ ⋄ l1←1≡≢,⍺ ⋄ r1←1≡≢,⍵
	x←⍺{l1:(1,≢⍵)⍴⍺ ⋄ 1≡lr:(1,⍴⍺)⍴⍺ ⋄ 2≡lr:⍺ ⋄ ,[⍳lr-1]⍺}⍵
	y←⍺{r1:((⍴x)[1],1)⍴⍵ ⋄ 1≡rr:((⍴⍵),1)⍴⍵ ⋄ 2≡rr:⍵ ⋄ ,[1+⍳rr-1]⍵}⍵
	(⍴x)[1]≢(⍴y)[0]:⎕SIGNAL 5 ⋄ s←(¯1↓⍴⍺),1↓⍴⍵ ⋄ c←≢y ⋄ ex←0≡≢x ⋄ ey←0≡1⌷⍴y
	(f eq + ⍬)∧g eq × ⍬:⍺{
		~⍺ both_numeric ⍵:⎕SIGNAL 11
		ex∨ey∨0≡c:s⍴⍬
		(1≥lr)∧1≥rr:s⍴x dot_prod y
		s⍴x matmul y
	}⍵
	(⍺ both_bool ⍵)∧(f eq ≠ ⍬)∧g eq ∧ ⍬:2|⍺+.×⍵
	l1:s⍴⍺⍺⌿(⊂⊃⍺)⍵⍵¨⍵ ⋄ r1:s⍴⍺⍺/⍺ ⍵⍵¨⊂⊃⍵
	c←≢y ⋄ ex←0≡≢x ⋄ ey←0≡1⌷⍴y
	ex∧ey:s⍴f⌿(c⍴x)g¨c⍴y ⋄ ex:s⍴f⌿(c⍴x)g¨y[;0] ⋄ ey:s⍴f⌿x[0;]g¨c⍴y
	0≡c:s⍴f⌿x[0;] g¨y[;0]
	z←((≢x),1⌷⍴y)⍴0
	_←{i←⍵ ⋄ tl←¯1+≢y ⋄ t←x[i;tl] g¨y[tl;]
		⍝ z[i;]←x[i;] f.g y
		⍝ z[i;] = f⌿ x[i;] g[0] y
		_←{j←⍵
			t⊢←(x[i;j] g¨y[j;])f¨ t
		⍵-1}⍣tl⊢tl-1
		z[i;]←t
	⍵+1}⍣(≢x)⊢0
	s⍴z
}

⍝ ⍣: Power Operator
pow←{
	⍺←⊢ ⋄ l←⍺ ⋄ f←⍺⍺ ⋄ g←⍵⍵
	3=⎕NC'⍵⍵':{(z←l f ⍵)g ⍵:z ⋄ ∇z}⍵
	g{0=⍺:⍵ ⋄ (⍺-1)∇l f ⍵}⍵
}

⍝ ∘: Compose Operator
jot←{
	type←⎕NC'⍺' '⍺⍺' '⍵⍵'
	type≡2 3 3:⍺ ⍺⍺ ⍵⍵ ⍵
	type≡0 3 3:⍺⍺ ⍵⍵ ⍵
	type≡0 2 3:⍺⍺ ⍵⍵ ⍵
	type≡0 3 2:⍵ ⍺⍺ ⍵⍵
	⎕SIGNAL 2
}

⍝ ⍤: Rank operator
rnk←{fn←⍺⍺ ⋄ spec←⍵⍵ ⋄ ⍺←⊢
	1<≡spec:⎕SIGNAL 11 ⋄ 1<≢⍴spec:⎕SIGNAL 4 ⋄ 3<≢spec:⎕SIGNAL 5
	spec←3⍴(¯1×2≡≢spec)⌽spec ⋄ p←spec[0] ⋄ q←spec[1] ⋄ r←spec[2]
	1≡⍺ 1:{
		p≥k←≢⍴⍵:fn ⍵ ⋄ k≤|p:↑fn¨⍵ ⋄ d←k-k|p ⋄ any 0=s←d↑⍴⍵:s⍴⍬
		↑s⍴{fn ⍵⌷z}¨⍳≢z←,[⍳d←k-k|p]⍵}⍵
	dx←⍺{q≥k←≢⍴⍺:0 ⋄ k≤|q:k ⋄ k-k|q}⍵ ⋄ dy←⍺{r≥k←≢⍴⍵:0 ⋄ k≤|r:k ⋄ k-k|r}⍵
	s←⍺{
		dx∧dy∧dx≢dy:⎕SIGNAL 4 ⋄ dx∧dy∧(dx↑⍴⍺)≢dy↑⍴⍵:⎕SIGNAL 5
		dx≢0:dx↑⍴⍺ ⋄ dy≢0:dy↑⍴⍵ ⋄ ⍬
	}⍵
	x←⍺{dx≡0:(1,⍴⍺)⍴⍺ ⋄ ,[⍳dx]⍺}⍵ ⋄ y←⍺{dy≡0:(1,⍴⍵)⍴⍵ ⋄ ,[⍳dy]⍵}⍵
	↑s⍴((≢x)|⍳c){(⍺⌷x) fn ⍵⌷y}¨(≢y)|⍳c←(≢x)⌈≢y
}

⍝ @: At operator
at←{⍺←⊢                             
    lfn←3=⎕NC'⍺⍺'
    rfn←3=⎕NC'⍵⍵'
    lfn⍱1≡⍺ 1:⎕SIGNAL 2
    ~lfn:⍺⍺⊣∇∇ ⍵⍵⊢⍵
    S←⍵⍵⊣⍵
    rfn<1<|≡S:A⊣A[S]←⍺ ⍺⍺(A←⍵)[S]
    pfx←{⍺≡(⍴⍺)↑⍵}
    rfn⍱1≥⍴⍴S:⎕SIGNAL 4
    ~rfn≤pfx/⍴¨S ⍵:⎕SIGNAL 5
    X←⍸∘~∘~⍣rfn⊢,S
    P←,[⍳1+⍴⍴S]↑,⊂⍵
    sel←(⊂X)⌷P
    sx←{⍬⍴⍣(1=×/⍴⍵)⊢⍵}
    new←sx ⍺ ⍺⍺ sel
    ext←new∘.⊣((⍴⍴new)↓⍴sel)⍴0
    ⍝ (⍴⍵)⍴P⊣((⊂X)⌷P)←ext
    (⍴⍵)⍴'sqdset_ibeam'⌶ P (⊂X) ext
}

⍝ ⌸: Key operator
key←{op←⍺⍺ ⋄ ⍺←⊢ 
	1≡⍺ 1:⍵ ∇⍳≢⍵
	1<≢⍴⍺:⎕SIGNAL 16
	(≢⍺)≢≢⍵:⎕SIGNAL 5
	3=⎕NC'⍺⍺':↑(m⌿⍺)op¨(m←≠(⊂i)⌷⍺)⊂[0](⊂i←⍋⍺)⌷⍵
	m←(≢op)≥op⍳⍺ ⋄ k←op⍪m⌿⍺ ⋄ v←(-≢k)↑m⌿⍵
	1↓¨k{⊂⍵}∇∇ v
}

⍝ ⍕: Formatting
fmt←{
	v←{
		1289=⎕DR ⍵:(∇ 9○⍵),'J',∇ 11○⍵
		⍵<0:'¯',∇ |⍵
		⍵≠⌊⍵:(∇ ⌊|⍵),'.',∇ ⌊10000×⍵-⌊⍵
		'0123456789'[x⊤⍨10⍴⍨1⌈⌈10⍟1+x←|⍵]
	}¨⍵
	1≥≢⍴v:¯1↓∊(⍪v),' '
	(-1+⌈⌿≢¨v){1↓∊⍺↑¨⍵}⍤1⊢v
}

⍝ ⎕⍞: Printing
println←{
	1<≡⍵:⎕SIGNAL 16
	~is_char ⍵:⍵⊣⎕←⍕⍵
	2<≢⍴⍵:{⎕←⍵ ⋄ ⎕←''}⍤¯1⊢⍵
	2=≢⍴⍵:{⎕←⍵}⍤¯1⊢⍵
	1('print_arr'⌶),⍵
}

print←{
	1<≢⍴⍵:⎕SIGNAL 16
	1<≡⍵:⎕SIGNAL 16
	~is_char ⍵:⎕SIGNAL 16
	0('print_arr'⌶)⍵
}

⍝ ⎕TS: Time stamp
q_ts←'q_ts_ibeam'⌶

⍝ Conor's Easter Eggs
starling←violetstarling←{⍺←⍵ ⋄ ⍺ ⍺⍺ ⍵⍵ ⍵}
dove←zebradove←{⍺←⍵ ⋄ (⍺⍺ ⍺)⍵⍵ ⍵}


:EndNamespace
