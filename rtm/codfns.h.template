#pragma once

#include <stddef.h>
#include <stdint.h>
#include <stdio.h>

#define UNICODE
#define _UNICODE

#ifdef _WIN32
 #define EXPORT __declspec(dllexport)
 #ifdef BUILD_CODFNS
	#define DECLSPEC EXPORT
 #else
	#define DECLSPEC __declspec(dllimport)
 #endif
#elif defined(__GNUC__)
 #define EXPORT __attribute__ ((visibility ("default")))
 #ifdef BUILD_CODFNS
	#define DECLSPEC EXPORT
 #else
	#define DECLSPEC extern __attribute__ ((visibility ("default")))
 #endif
#else
 #define EXPORT
 #define DECLSPEC
#endif

enum cell_type {
	CELL_VOID,
	CELL_VOID_BOX,
	CELL_ARRAY,
	CELL_ARRAY_BOX,
	CELL_FUNC,
	CELL_FUNC_BOX,
	CELL_MOPER,
	CELL_MOPER_BOX,
	CELL_DOPER,
	CELL_DOPER_BOX,
	CELL_DERF,
	CELL_ENV_BOX,
	CELL_MAX
};

enum array_type {
	ARR_SPAN,
	ARR_BOOL,
	ARR_SINT,
	ARR_INT,
	ARR_DBL,
	ARR_CMPX,
	ARR_CHAR8,
	ARR_CHAR16,
	ARR_CHAR32,
	ARR_MIXED,
	ARR_NESTED,
	ARR_MAX
};

enum array_storage {
	STG_HOST, STG_DEVICE, STG_MAX
};

struct cell_func;
struct cell_array;

typedef int (*func_mon)(struct cell_array **,
    struct cell_array *, struct cell_func *);

typedef int (*func_dya)(struct cell_array **,
    struct cell_array *, struct cell_array *, struct cell_func *);

typedef int (*topfn_ptr)(struct cell_array **,
    struct cell_array *, struct cell_array *);

struct cell_void {
	enum cell_type ctyp;
	unsigned int refc;
};

struct apl_cmpx {
	double real;
	double imag;
};

#define STATIC_RANK_MAX 5

struct cell_array {
	enum cell_type ctyp;
	unsigned int refc;
	enum array_storage storage;
	enum array_type type;
	void *values;
	unsigned int *vrefc;
	unsigned int rank;
	size_t shape[STATIC_RANK_MAX];
};

struct cell_func {
	enum cell_type ctyp;
	unsigned int refc;
	func_mon fptr_mon;
	func_dya fptr_dya;
	void **fv;
	unsigned int fs;
	void **opts;
	void *fv_[];
};

struct cell_derf {
	enum cell_type ctyp;
	unsigned int refc;
	func_mon fptr_mon;
	func_dya fptr_dya;
	void **fv;
	unsigned int fs;
	void **opts;
	void *fv_[];
};

struct cell_moper {
	enum cell_type ctyp;
	unsigned int refc;
	func_mon fptr_am;
	func_dya fptr_ad;
	func_mon fptr_fm;
	func_dya fptr_fd;
	unsigned int fs;
	void *fv[];
};

struct cell_doper {
	enum cell_type ctyp;
	unsigned int refc;
	func_mon fptr_aam;
	func_dya fptr_aad;
	func_mon fptr_afm;
	func_dya fptr_afd;
	func_mon fptr_fam;
	func_dya fptr_fad;
	func_mon fptr_ffm;
	func_dya fptr_ffd;
	unsigned int fs;
	void *fv[];
};

/* Error Handling */
DECLSPEC struct cell_array *get_debug_info(void);
DECLSPEC void release_debug_info(void);
DECLSPEC void debug_trace(int, const char *, int, const char *, const char *);

#define CHK(expr, fail, msg)					\
if (0 < (err = (expr))) {					\
	debug_trace(err, __FILE__, __LINE__, __func__, msg);	\
	goto fail;						\
}								\

#define CHKFN(expr, fail) CHK(expr, fail, "" #expr)
#define CHKIG(expr, fail) if (0 < (err = (expr))) goto fail;

#define TRC(expr, msg)						\
if (0 < (err = (expr))) {					\
	debug_trace(err, __FILE__, __LINE__, __func__, msg);	\
}								\

/* DWA and Interface */
DECLSPEC int set_dwafns(void *);
DECLSPEC int call_dwa(topfn_ptr, void *, void *, void *, char *);
DECLSPEC void print_cell_stats(void);
DECLSPEC void print_ibeam_stats(void);

/* Generic cell handlers */
DECLSPEC void release_cell(void *);
DECLSPEC void *retain_cell(void *);

/* Basic VOID type */
DECLSPEC int mk_void(struct cell_void **);
DECLSPEC void release_void(struct cell_void *);

/* ARRAY type */
DECLSPEC int mk_array(struct cell_array **,
    enum array_type, enum array_storage, unsigned int);
DECLSPEC int release_array(struct cell_array *);
DECLSPEC int alloc_array(struct cell_array *);
DECLSPEC int fill_array(struct cell_array *, void *);
DECLSPEC int chk_array_valid(struct cell_array *);
DECLSPEC int squeeze_array(struct cell_array *);

/* FUNC types */
DECLSPEC int mk_func(struct cell_func **, func_mon, func_dya, unsigned int);
DECLSPEC int mk_derf(struct cell_derf **, func_mon, func_dya, unsigned int);
DECLSPEC void release_func(struct cell_func *);
DECLSPEC void release_derf(struct cell_derf *);
DECLSPEC void release_env(void **, void **);
DECLSPEC int mk_moper(struct cell_moper **,
    func_mon, func_dya, func_mon, func_dya,
    unsigned int);
DECLSPEC int mk_doper(struct cell_doper **,
    func_mon, func_dya, func_mon, func_dya,
    func_mon, func_dya, func_mon, func_dya,
    unsigned int);
DECLSPEC void release_moper(struct cell_moper *);
DECLSPEC void release_doper(struct cell_doper *);
DECLSPEC int derive_func_opts(struct cell_func **, struct cell_func *, int);

/* Calling helpers */
DECLSPEC int mk_array_int32(struct cell_array **, int32_t);
DECLSPEC int mk_nested_array(struct cell_array **, size_t count);
DECLSPEC int var_ref(void *);
DECLSPEC int guard_check(struct cell_array *);

/* Runtime initialization function */
DECLSPEC int cdf_prim_init(void);
